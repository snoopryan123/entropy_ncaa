geom_line(linewidth=1) +
geom_point(aes(y = max_score), size=2, shape=21, stroke=1.5) +
scale_color_manual(name="qL", values=my_palette_npq_v0) +
labs(title = paste0("p = ", unique(plot_df_tmmEHam2$p))) +
theme(
plot.title = element_text(size = if (clipped_) 40 else 70),
strip.text.x = element_text(size = if (clipped_) 19 else 18),
axis.text.x = element_text(size = if (clipped_) 30 else 40),
axis.text.y = element_text(size = if (clipped_) 30 else 40),
axis.title.x = element_text(size = if (clipped_) 40 else 80),
axis.title.y = element_text(size = if (clipped_) 40 else 80),
legend.title = element_text(size = if (clipped_) 35 else 70),
legend.text  = element_text(size = if (clipped_) 35 else 50),
legend.key.size = unit(if (clipped_) 1 else 2, "lines"),
panel.spacing = unit(1.5, "lines")
) +
ylab("expected max Hamming score")
# plot_eMaxHammingScoreTmm_2
ggsave(paste0(output_folder,"plot_eMaxHammingScoreTmm_v2",if (clipped_) "_clipped",".png"),
width=if (clipped_) 18 else 20, height=if (clipped_) 12 else 18
)
}
plot_df_tmmESPN3 = read_csv(paste0(output_folder,"plot_grid_eMaxScore_v3.csv"))
plot_df_tmmESPN3 = plot_df_tmmESPN3 %>%
group_by(p,qE,qL,q_cutoff,n,scoring_method) %>%
mutate(eMaxScore = mean(eMaxScore)) %>%
ungroup() %>%
filter(fold == 1)
plot_df_tmmESPN3 = plot_df_tmmESPN3 %>%
group_by(q_cutoff,n) %>%
mutate(max_score = ifelse(eMaxScore == max(eMaxScore), eMaxScore, NA)) %>%
ungroup()
for (clipped_ in c(TRUE,FALSE)) {
# clipped_ = TRUE
plot_eMaxESPNScoreTmm_3 =
plot_df_tmmESPN3 %>%
# filter(n %in% c(1,10,100,10000)) %>%
filter(n %in% c(1,10,100)) %>%
mutate(clipped = clipped_) %>%
filter(ifelse(clipped,
q_cutoff < 4.5,
TRUE)) %>%
group_by(q_cutoff) %>%
mutate(
n_ = paste0("n=", n, ",  "),
qE_str = paste0(
paste0("q",(1:6)[1:6 < q_cutoff[1]], collapse="="), "=qE,  "
),
qL_str = paste0(
paste0("q",(1:6)[1:6 > q_cutoff[1]], collapse="="), "=qL"
),
nq_ = paste0(n_, qE_str, qL_str)
) %>%
ungroup() %>%
ggplot(aes(x=qE,color=factor(qL),y=eMaxScore)) +
# facet_wrap(~fct_reorder(nq_,q_cutoff), ncol=4) +
facet_wrap(~fct_reorder(nq_,q_cutoff), ncol=3) +
geom_line(linewidth=1) +
geom_point(aes(y = max_score), size=3, shape=31, stroke=1.5) +
scale_color_manual(name="qL", values=my_palette_npq_v0) +
labs(title = paste0("p = ", unique(plot_df_tmmESPN3$p))) +
theme(
plot.title = element_text(size = if (clipped_) 40 else 70),
strip.text.x = element_text(size = if (clipped_) 19 else 18),
axis.text.x = element_text(size = if (clipped_) 30 else 40),
axis.text.y = element_text(size = if (clipped_) 30 else 40),
axis.title.x = element_text(size = if (clipped_) 40 else 80),
axis.title.y = element_text(size = if (clipped_) 40 else 80),
legend.title = element_text(size = if (clipped_) 35 else 70),
legend.text  = element_text(size = if (clipped_) 35 else 50),
legend.key.size = unit(if (clipped_) 1 else 2, "lines"),
panel.spacing = unit(1.5, "lines")
) +
ylab("expected max ESPN score")
plot_eMaxESPNScoreTmm_3
ggsave(paste0(output_folder,"plot_eMaxESPNScoreTmm_v3",if (clipped_) "_clipped",".png"),
width=if (clipped_) 18 else 20, height=if (clipped_) 12 else 18
)
}
setwd("~/Dropbox/Mac (2)/Desktop/RESEARCH/entropy_ncaa/code_2")
source("b11_smm_main.R")
plot_df = read_csv(paste0(output_folder,"plot_grid_wpHammingScore.csv"))
plot_df = plot_df %>% filter(n <= 1000 & k <= 1000)
my_palette_nk1 = c(
rev(brewer.pal(name="PuRd",n=9)[4:9]),
brewer.pal(name="Blues",n=9)[4:9]
)
for (p_ in unique(plot_df$p)) {
for (k_ in unique(plot_df$k)) {
# p_ = 0.75
# k_ = 100
plot_wp1_kp =
plot_df %>%
filter(p == p_ & k == k_) %>%
mutate(n_ = paste0("n = ", n)) %>%
ggplot(aes(y=q, x=r)) +
facet_wrap(~n_,nrow=1) +
theme(panel.spacing = unit(2, "lines")) +
labs(title=paste0("k = ", k_, ", p = ", p_)) +
geom_tile(aes(fill=wp)) +
geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_hline(aes(yintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_abline(aes(slope = 1, intercept=0), color="gray60", linetype="dashed", linewidth=0.5) +
# scale_fill_gradientn(name="win\nprobability", colours = terrain.colors(7))
scale_fill_gradientn(name="win\nprobability", colours = rev(terrain.colors(7)))
# plot_wp1_kp
ggsave(
paste0(output_folder, "plot_wpHammingScore_k",format(k_, scientific=T),"p",p_,".png"),
plot_wp1_kp,
# width=12,height=10
width=16,height=4
# width=10,height=8
)
# plot_wp2_kp =
#   plot_df %>%
#   filter(p == p_ & k == k_) %>%
#   mutate(n_ = paste0("n = ", n)) %>%
#   ggplot(aes(x=q, color=factor(r), y=wp)) +
#   facet_wrap(~n_) +
#   theme(panel.spacing = unit(2, "lines")) +
#   # geom_vline
#   labs(title=paste0("k = ", k_, ", p = ", p_)) +
#   geom_line(linewidth=1) +
#   geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
#   ylab("win probability") +
#   scale_color_manual(name="r", values=my_palette_nk1)
# plot_wp2_kp
# ggsave(paste0(output_folder, "plot_wp1HammingScore_k",k_,"p",p_,".png"), plot_wp2_kp,
#        width=12,height=8)
}
}
output_folder
unique(plot_df$p)
unique(plot_df$k)
View(plot_df)
plot_df = read_csv(paste0(output_folder,"plot_grid_wpHammingScore.csv"))
my_palette_nk1 = c(
rev(brewer.pal(name="PuRd",n=9)[4:9]),
brewer.pal(name="Blues",n=9)[4:9]
)
for (p_ in unique(plot_df$p)) {
for (k_ in unique(plot_df$k)) {
# p_ = 0.75
# k_ = 100
plot_wp1_kp =
plot_df %>%
filter(p == p_ & k == k_) %>%
mutate(n_ = paste0("n = ", n)) %>%
ggplot(aes(y=q, x=r)) +
facet_wrap(~n_,nrow=1) +
theme(panel.spacing = unit(2, "lines")) +
labs(title=paste0("k = ", k_, ", p = ", p_)) +
geom_tile(aes(fill=wp)) +
geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_hline(aes(yintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_abline(aes(slope = 1, intercept=0), color="gray60", linetype="dashed", linewidth=0.5) +
# scale_fill_gradientn(name="win\nprobability", colours = terrain.colors(7))
scale_fill_gradientn(name="win\nprobability", colours = rev(terrain.colors(7)))
# plot_wp1_kp
ggsave(
paste0(output_folder, "plot_wpHammingScore_k",format(k_, scientific=T),"p",p_,".png"),
plot_wp1_kp,
# width=12,height=10
width=16,height=4
# width=10,height=8
)
# plot_wp2_kp =
#   plot_df %>%
#   filter(p == p_ & k == k_) %>%
#   mutate(n_ = paste0("n = ", n)) %>%
#   ggplot(aes(x=q, color=factor(r), y=wp)) +
#   facet_wrap(~n_) +
#   theme(panel.spacing = unit(2, "lines")) +
#   # geom_vline
#   labs(title=paste0("k = ", k_, ", p = ", p_)) +
#   geom_line(linewidth=1) +
#   geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
#   ylab("win probability") +
#   scale_color_manual(name="r", values=my_palette_nk1)
# plot_wp2_kp
# ggsave(paste0(output_folder, "plot_wp1HammingScore_k",k_,"p",p_,".png"), plot_wp2_kp,
#        width=12,height=8)
}
}
for (p_ in unique(plot_df$p)) {
for (k_ in unique(plot_df$k)) {
# p_ = 0.75
# k_ = 100
plot_wp1_kp =
plot_df %>%
filter(n <= 1000 & k <= 1000) %>%
filter(p == p_ & k == k_) %>%
mutate(n_ = paste0("n = ", n)) %>%
ggplot(aes(y=q, x=r)) +
facet_wrap(~n_,nrow=1) +
theme(panel.spacing = unit(2, "lines")) +
labs(title=paste0("k = ", k_, ", p = ", p_)) +
geom_tile(aes(fill=wp)) +
geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_hline(aes(yintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_abline(aes(slope = 1, intercept=0), color="gray60", linetype="dashed", linewidth=0.5) +
# scale_fill_gradientn(name="win\nprobability", colours = terrain.colors(7))
scale_fill_gradientn(name="win\nprobability", colours = rev(terrain.colors(7)))
# plot_wp1_kp
ggsave(
paste0(output_folder, "plot_wpHammingScore_k",format(k_, scientific=T),"p",p_,".png"),
plot_wp1_kp,
# width=12,height=10
width=16,height=4
# width=10,height=8
)
plot_wp2_kp =
plot_df %>%
filter(p == p_ & k == k_) %>%
mutate(n_ = paste0("n = ", n)) %>%
ggplot(aes(x=q, color=factor(r), y=wp)) +
facet_wrap(~n_) +
theme(panel.spacing = unit(2, "lines")) +
# geom_vline
labs(title=paste0("k = ", k_, ", p = ", p_)) +
geom_line(linewidth=1) +
geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
ylab("win probability") +
scale_color_manual(name="r", values=my_palette_nk1)
plot_wp2_kp
ggsave(paste0(output_folder, "plot_wp1HammingScore_k",k_,"p",p_,".png"), plot_wp2_kp,
width=12,height=8)
}
}
for (p_ in unique(plot_df$p)) {
for (k_ in unique(plot_df$k)) {
# p_ = 0.75
# k_ = 100
plot_wp1_kp =
plot_df %>%
filter(n <= 1000 & k <= 1000) %>%
filter(p == p_ & k == k_) %>%
mutate(n_ = paste0("n = ", n)) %>%
ggplot(aes(y=q, x=r)) +
facet_wrap(~n_,nrow=1) +
theme(panel.spacing = unit(2, "lines")) +
labs(title=paste0("k = ", k_, ", p = ", p_)) +
geom_tile(aes(fill=wp)) +
geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_hline(aes(yintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_abline(aes(slope = 1, intercept=0), color="gray60", linetype="dashed", linewidth=0.5) +
# scale_fill_gradientn(name="win\nprobability", colours = terrain.colors(7))
scale_fill_gradientn(name="win\nprobability", colours = rev(terrain.colors(7)))
# plot_wp1_kp
ggsave(
paste0(output_folder, "plot_wpHammingScore_k",format(k_, scientific=T),"p",p_,".png"),
plot_wp1_kp,
# width=12,height=10
width=16,height=4
# width=10,height=8
)
plot_wp2_kp =
plot_df %>%
filter(p == p_ & k == k_) %>%
mutate(n_ = paste0("n = ", n)) %>%
ggplot(aes(y=q, x=r)) +
facet_wrap(~n_,nrow=3) +
theme(panel.spacing = unit(2, "lines")) +
labs(title=paste0("k = ", k_, ", p = ", p_)) +
geom_tile(aes(fill=wp)) +
geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_hline(aes(yintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_abline(aes(slope = 1, intercept=0), color="gray60", linetype="dashed", linewidth=0.5) +
# scale_fill_gradientn(name="win\nprobability", colours = terrain.colors(7))
scale_fill_gradientn(name="win\nprobability", colours = rev(terrain.colors(7)))
# plot_wp2_kp
ggsave(
paste0(output_folder, "plot_wp1_k",format(k_, scientific=T),"p",p_,".png"),
plot_wp2_kp,
# width=12,height=10
width=16,height=4
# width=10,height=8
)
# plot_wp2_kp =
#   plot_df %>%
#   filter(p == p_ & k == k_) %>%
#   mutate(n_ = paste0("n = ", n)) %>%
#   ggplot(aes(x=q, color=factor(r), y=wp)) +
#   facet_wrap(~n_) +
#   theme(panel.spacing = unit(2, "lines")) +
#   # geom_vline
#   labs(title=paste0("k = ", k_, ", p = ", p_)) +
#   geom_line(linewidth=1) +
#   geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
#   ylab("win probability") +
#   scale_color_manual(name="r", values=my_palette_nk1)
# plot_wp2_kp
# ggsave(paste0(output_folder, "plot_wp1HammingScore_k",k_,"p",p_,".png"), plot_wp2_kp,
#        width=12,height=8)
}
}
# plot_wp2_kp
ggsave(
paste0(output_folder, "plot_wp1_k",format(k_, scientific=T),"p",p_,".png"),
plot_wp2_kp,
width=12,height=10
# width=16,height=4
# width=10,height=8
)
for (p_ in unique(plot_df$p)) {
for (k_ in unique(plot_df$k)) {
# p_ = 0.75
# k_ = 100
if (n <= 1000 & k <= 1000) {
plot_wp1_kp =
plot_df %>%
filter(n <= 1000 & k <= 1000) %>%
filter(p == p_ & k == k_) %>%
mutate(n_ = paste0("n = ", n)) %>%
ggplot(aes(y=q, x=r)) +
facet_wrap(~n_,nrow=1) +
theme(panel.spacing = unit(2, "lines")) +
labs(title=paste0("k = ", k_, ", p = ", p_)) +
geom_tile(aes(fill=wp)) +
geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_hline(aes(yintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_abline(aes(slope = 1, intercept=0), color="gray60", linetype="dashed", linewidth=0.5) +
# scale_fill_gradientn(name="win\nprobability", colours = terrain.colors(7))
scale_fill_gradientn(name="win\nprobability", colours = rev(terrain.colors(7)))
# plot_wp1_kp
ggsave(
paste0(output_folder, "plot_wpHammingScore_k",format(k_, scientific=T),"p",p_,".png"),
plot_wp1_kp,
# width=12,height=10
width=16,height=4
# width=10,height=8
)
}
plot_wp2_kp =
plot_df %>%
filter(p == p_ & k == k_) %>%
mutate(n_ = paste0("n = ", n)) %>%
ggplot(aes(y=q, x=r)) +
facet_wrap(~n_,nrow=3) +
theme(panel.spacing = unit(2, "lines")) +
labs(title=paste0("k = ", k_, ", p = ", p_)) +
geom_tile(aes(fill=wp)) +
geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_hline(aes(yintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_abline(aes(slope = 1, intercept=0), color="gray60", linetype="dashed", linewidth=0.5) +
# scale_fill_gradientn(name="win\nprobability", colours = terrain.colors(7))
scale_fill_gradientn(name="win\nprobability", colours = rev(terrain.colors(7)))
# plot_wp2_kp
ggsave(
paste0(output_folder, "plot_wp1_k",format(k_, scientific=T),"p",p_,".png"),
plot_wp2_kp,
width=12,height=10
# width=16,height=4
# width=10,height=8
)
# plot_wp2_kp =
#   plot_df %>%
#   filter(p == p_ & k == k_) %>%
#   mutate(n_ = paste0("n = ", n)) %>%
#   ggplot(aes(x=q, color=factor(r), y=wp)) +
#   facet_wrap(~n_) +
#   theme(panel.spacing = unit(2, "lines")) +
#   # geom_vline
#   labs(title=paste0("k = ", k_, ", p = ", p_)) +
#   geom_line(linewidth=1) +
#   geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
#   ylab("win probability") +
#   scale_color_manual(name="r", values=my_palette_nk1)
# plot_wp2_kp
# ggsave(paste0(output_folder, "plot_wp1HammingScore_k",k_,"p",p_,".png"), plot_wp2_kp,
#        width=12,height=8)
}
}
for (p_ in unique(plot_df$p)) {
for (k_ in unique(plot_df$k)) {
# p_ = 0.75
# k_ = 100
if (k_ <= 1000) {
plot_wp1_kp =
plot_df %>%
filter(n <= 1000 & k <= 1000) %>%
filter(p == p_ & k == k_) %>%
mutate(n_ = paste0("n = ", n)) %>%
ggplot(aes(y=q, x=r)) +
facet_wrap(~n_,nrow=1) +
theme(panel.spacing = unit(2, "lines")) +
labs(title=paste0("k = ", k_, ", p = ", p_)) +
geom_tile(aes(fill=wp)) +
geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_hline(aes(yintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_abline(aes(slope = 1, intercept=0), color="gray60", linetype="dashed", linewidth=0.5) +
# scale_fill_gradientn(name="win\nprobability", colours = terrain.colors(7))
scale_fill_gradientn(name="win\nprobability", colours = rev(terrain.colors(7)))
# plot_wp1_kp
ggsave(
paste0(output_folder, "plot_wpHammingScore_k",format(k_, scientific=T),"p",p_,".png"),
plot_wp1_kp,
# width=12,height=10
width=16,height=4
# width=10,height=8
)
}
plot_wp2_kp =
plot_df %>%
filter(p == p_ & k == k_) %>%
mutate(n_ = paste0("n = ", n)) %>%
ggplot(aes(y=q, x=r)) +
facet_wrap(~n_,nrow=3) +
theme(panel.spacing = unit(2, "lines")) +
labs(title=paste0("k = ", k_, ", p = ", p_)) +
geom_tile(aes(fill=wp)) +
geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_hline(aes(yintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_abline(aes(slope = 1, intercept=0), color="gray60", linetype="dashed", linewidth=0.5) +
# scale_fill_gradientn(name="win\nprobability", colours = terrain.colors(7))
scale_fill_gradientn(name="win\nprobability", colours = rev(terrain.colors(7)))
# plot_wp2_kp
ggsave(
paste0(output_folder, "plot_wp1_k",format(k_, scientific=T),"p",p_,".png"),
plot_wp2_kp,
width=12,height=10
# width=16,height=4
# width=10,height=8
)
# plot_wp2_kp =
#   plot_df %>%
#   filter(p == p_ & k == k_) %>%
#   mutate(n_ = paste0("n = ", n)) %>%
#   ggplot(aes(x=q, color=factor(r), y=wp)) +
#   facet_wrap(~n_) +
#   theme(panel.spacing = unit(2, "lines")) +
#   # geom_vline
#   labs(title=paste0("k = ", k_, ", p = ", p_)) +
#   geom_line(linewidth=1) +
#   geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
#   ylab("win probability") +
#   scale_color_manual(name="r", values=my_palette_nk1)
# plot_wp2_kp
# ggsave(paste0(output_folder, "plot_wp1HammingScore_k",k_,"p",p_,".png"), plot_wp2_kp,
#        width=12,height=8)
}
}
for (p_ in unique(plot_df$p)) {
for (k_ in unique(plot_df$k)) {
# p_ = 0.75
# k_ = 100
if (k_ <= 1000) {
plot_wp1_kp =
plot_df %>%
filter(n <= 1000 & k <= 1000) %>%
filter(p == p_ & k == k_) %>%
mutate(n_ = paste0("n = ", n)) %>%
ggplot(aes(y=q, x=r)) +
facet_wrap(~n_,nrow=1) +
theme(panel.spacing = unit(2, "lines")) +
labs(title=paste0("k = ", k_, ", p = ", p_)) +
geom_tile(aes(fill=wp)) +
geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_hline(aes(yintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_abline(aes(slope = 1, intercept=0), color="gray60", linetype="dashed", linewidth=0.5) +
# scale_fill_gradientn(name="win\nprobability", colours = terrain.colors(7))
scale_fill_gradientn(name="win\nprobability", colours = rev(terrain.colors(7)))
# plot_wp1_kp
ggsave(
paste0(output_folder, "plot_wpHammingScore_k",format(k_, scientific=T),"p",p_,".png"),
plot_wp1_kp,
# width=12,height=10
width=16,height=4
# width=10,height=8
)
}
plot_wp2_kp =
plot_df %>%
filter(p == p_ & k == k_) %>%
mutate(n_ = paste0("n = ", n)) %>%
ggplot(aes(y=q, x=r)) +
facet_wrap(~n_,nrow=3) +
theme(panel.spacing = unit(2, "lines")) +
labs(title=paste0("k = ", k_, ", p = ", p_)) +
geom_tile(aes(fill=wp)) +
geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_hline(aes(yintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
geom_abline(aes(slope = 1, intercept=0), color="gray60", linetype="dashed", linewidth=0.5) +
# scale_fill_gradientn(name="win\nprobability", colours = terrain.colors(7))
scale_fill_gradientn(name="win\nprobability", colours = rev(terrain.colors(7)))
# plot_wp2_kp
ggsave(
# paste0(output_folder, "plot_wp1_k",format(k_, scientific=T),"p",p_,".png"),
paste0(output_folder, "plot_wp1_k",k_,"p",p_,".png"),
plot_wp2_kp,
width=12,height=10
# width=16,height=4
# width=10,height=8
)
# plot_wp2_kp =
#   plot_df %>%
#   filter(p == p_ & k == k_) %>%
#   mutate(n_ = paste0("n = ", n)) %>%
#   ggplot(aes(x=q, color=factor(r), y=wp)) +
#   facet_wrap(~n_) +
#   theme(panel.spacing = unit(2, "lines")) +
#   # geom_vline
#   labs(title=paste0("k = ", k_, ", p = ", p_)) +
#   geom_line(linewidth=1) +
#   geom_vline(aes(xintercept = p_), color="gray60", linetype="dashed", linewidth=0.5) +
#   ylab("win probability") +
#   scale_color_manual(name="r", values=my_palette_nk1)
# plot_wp2_kp
# ggsave(paste0(output_folder, "plot_wp1HammingScore_k",k_,"p",p_,".png"), plot_wp2_kp,
#        width=12,height=8)
}
}
